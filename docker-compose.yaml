version: '2.1'

networks:
  main:
    driver: bridge

services:
  proxy:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    ports:
      - 80:80
    volumes:
      - ./proxy:/usr/src/app/
    links:
      - frontend
      - backend
      - github-auth
      - webhook-collector
    networks:
     - main
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.development
    volumes:
     - ./frontend:/usr/src/app/
    networks:
     - main
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.development
    environment:
     - COOKIE_DOMAIN=.payload.local
     # WEBHOOK_BASE_URL supplied in .env file
    volumes:
     - ./backend:/usr/src/app/
    links:
     - github-service
     - organization-service
     - repo-service
     - run-service
     - user-service
     - session-service
    networks:
      - main
  status-broadcaster:
    build:
      context: ./status-broadcaster
      dockerfile: Dockerfile.development
    volumes:
     - ./status-broadcaster:/usr/src/app/
    networks:
     - main
  webhook-collector:
    build:
      context: ./webhook-collector
      dockerfile: Dockerfile.development
    volumes:
     - ./webhook-collector:/usr/src/app/
    environment:
     - WORKER_QUEUE=payload-worker
     - APP_HOST=payload.local
     - APP_PROTOCOL=http
     - RETRIES=3
     - LEASE_SECONDS=30
     - MAX_LEASE_SECONDS=600 # 10 minutes
    links:
     - queue-service
     - repo-service
     - user-service
     - organization-service
     - status-broadcaster
    networks:
     - main
  github-auth:
    build:
      context: ./github-auth
      dockerfile: Dockerfile.development
    volumes:
     - ./github-auth:/usr/src/app/
    environment:
     - APP_HOST=payload.local
     - APP_PROTOCOL=http
     - COOKIE_DOMAIN=.payload.local
     # supplied in .env file
     # GH_CLIENT_ID
     # GH_CLIENT_SECRET
    links:
      - user-service
      - session-service
      - github-service
      - random-state-service
    networks:
     - main
  queue-service:
    build:
      context: ./queue-service
      dockerfile: Dockerfile.development
    environment:
      - REDIS_HOST=redis
    volumes:
     - ./queue-service:/usr/src/app/
    links:
     - redis
    networks:
     - main
  redis:
    image: redis
    networks:
     - main
  mongodb:
    image: bitnami/mongodb:latest
    environment:
      - MONGODB_USERNAME=payloaduser
      - MONGODB_PASSWORD=password
      - MONGODB_DATABASE=payload
    healthcheck:
      test: "exit 0"
    networks:
     - main
  init-db:
    build:
      context: ./init-db
      dockerfile: Dockerfile.development
    environment:
     - MONGODB_URL=mongodb://mongodb:27017
     - MONGODB_USERNAME=payloaduser
     - MONGODB_PASSWORD=password
     - MONGODB_DATABASE=payload
    volumes:
     - ./init-db:/usr/src/app/
    links:
      - mongodb
    healthcheck:
      test: "exit 0"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
     - main
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile.development
    networks:
      - main
    environment:
     - MONGODB_URL=mongodb://mongodb:27017
     - MONGODB_USERNAME=payloaduser
     - MONGODB_PASSWORD=password
     - MONGODB_DATABASE=payload
    volumes:
     - ./user-service:/usr/src/app/
    links:
     - mongodb
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
     - main
  session-service:
    build:
      context: ./session-service
      dockerfile: Dockerfile.development
    environment:
     - JWT_SECRET=s3cr3t
    volumes:
     - ./session-service:/usr/src/app/
    networks:
     - main
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile.development
    volumes:
     - ./worker:/usr/src/app/
    links:
     - queue-service
     - run-service
     - status-broadcaster
    environment:
     - WORKER_QUEUE=payload-worker
     - WORKER_NAME=worker-1
     - APP_HOST=payload.local
     - APP_PROTOCOL=http
    networks:
     - main
  worker-clone:
    build:
      context: ./worker
      dockerfile: Dockerfile.development
    volumes:
     - ./worker:/usr/src/app/
    links:
     - queue-service
     - run-service
     - status-broadcaster
    environment:
     - WORKER_QUEUE=payload-worker
     - WORKER_NAME=worker-2
     - APP_HOST=payload.local
     - APP_PROTOCOL=http
    networks:
     - main
  queue-garbage-collector:
    build:
      context: ./queue-garbage-collector
      dockerfile: Dockerfile.development
    volumes:
     - ./queue-garbage-collector:/usr/src/app/
    links:
     - queue-service
    environment:
     - WORKER_QUEUE=payload-worker
     - SLEEP_AFTER_COLLECT=60 #seconds
    networks:
     - main
  organization-service:
    build:
      context: ./organization-service
      dockerfile: Dockerfile.development
    environment:
     - MONGODB_URL=mongodb://mongodb:27017
     - MONGODB_USERNAME=payloaduser
     - MONGODB_PASSWORD=password
     - MONGODB_DATABASE=payload
    volumes:
     - ./organization-service:/usr/src/app/
    links:
     - mongodb
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
     - main
  github-service:
    build:
      context: ./github-service
      dockerfile: Dockerfile.development
    volumes:
     - ./github-service:/usr/src/app/
    networks:
     - main
  repo-service:
    build:
      context: ./repo-service
      dockerfile: Dockerfile.development
    environment:
     - MONGODB_URL=mongodb://mongodb:27017
     - MONGODB_USERNAME=payloaduser
     - MONGODB_PASSWORD=password
     - MONGODB_DATABASE=payload
    volumes:
     - ./repo-service:/usr/src/app/
    links:
     - organization-service
     - user-service
     - mongodb
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
     - main
  run-service:
    build:
      context: ./run-service
      dockerfile: Dockerfile.development
    environment:
     - MONGODB_URL=mongodb://mongodb:27017
     - MONGODB_USERNAME=payloaduser
     - MONGODB_PASSWORD=password
     - MONGODB_DATABASE=payload
    volumes:
     - ./run-service:/usr/src/app/
    links:
     - repo-service
     - mongodb
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
     - main
  random-state-service:
    build:
      context: ./random-state-service
      dockerfile: Dockerfile.development
    environment:
     - STATE_TTL_SECONDS=300
     - REDIS_HOST=redis
    volumes:
     - ./random-state-service:/usr/src/app/
    links:
     - redis
    networks:
     - main
  billing-service:
    build:
      context: ./billing-service
      dockerfile: Dockerfile.development
    environment:
     - MONGODB_URL=mongodb://mongodb:27017
     - MONGODB_USERNAME=payloaduser
     - MONGODB_PASSWORD=password
     - MONGODB_DATABASE=payload
    volumes:
     - ./billing-service:/usr/src/app/
    ports:
      - 3000:3000
    links:
     - mongodb
     - organization-service
     - user-service
     - repo-service
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
     - main
