version: '2'

services:
  proxy:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    ports:
      - 80:80
    volumes:
      - ./proxy:/usr/src/app/
    links:
      - frontend
      - backend
      - github-auth
      - webhook-collector
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.development
    volumes:
     - ./frontend:/usr/src/app/
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.development
    volumes:
     - ./backend:/usr/src/app/
  status-broadcaster:
    build:
      context: ./status-broadcaster
      dockerfile: Dockerfile.development
    volumes:
     - ./status-broadcaster:/usr/src/app/
  webhook-collector:
    build:
      context: ./webhook-collector
      dockerfile: Dockerfile.development
    volumes:
     - ./webhook-collector:/usr/src/app/
    environment:
     - WORKER_QUEUE=payload-worker
    links:
     - queue-service
  github-auth:
    build:
      context: ./github-auth
      dockerfile: Dockerfile.development
    volumes:
     - ./github-auth:/usr/src/app/
    links:
      - user-service
      - session-service
  queue-service:
    build:
      context: ./queue-service
      dockerfile: Dockerfile.development
    volumes:
     - ./queue-service:/usr/src/app/
    links:
     - redis
  redis:
    image: redis
  mongodb:
    image: mongo:latest
    command: mongod --smallfiles
  init-db:
    build:
      context: ./init-db
      dockerfile: Dockerfile.development
    environment:
     - MONGO_URL=mongodb://mongodb:27017
     - MONGO_DB=payload
    volumes:
     - ./init-db:/usr/src/app/
    links:
      - mongodb
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile.development
    environment:
     - MONGO_URL=mongodb://mongodb:27017
     - MONGO_DB=payload
    volumes:
     - ./user-service:/usr/src/app/
    links:
     - mongodb
  session-service:
    build:
      context: ./session-service
      dockerfile: Dockerfile.development
    environment:
     - JWT_SECRET=s3cr3t
    volumes:
     - ./session-service:/usr/src/app/
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile.development
    volumes:
     - ./worker:/usr/src/app/
    links:
     - queue-service
    environment:
     - WORKER_QUEUE=payload-worker
     - WORKER_NAME=worker-1
    restart: always
  queue-garbage-collector:
    build:
      context: ./queue-garbage-collector
      dockerfile: Dockerfile.development
    volumes:
     - ./queue-garbage-collector:/usr/src/app/
    links:
     - queue-service
    environment:
     - WORKER_QUEUE=payload-worker
     - SLEEP_AFTER_COLLECT=60 #seconds
    restart: always
